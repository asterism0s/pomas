@use './spacing';
@use './breakpoints';
@use './colors';
@use './variables';


/* button mixin */

//button reset
@mixin btn-reset {
    background: none;
    border: none;
    color: inherit;
    font: inherit;
    text-align: inherit;
    cursor: pointer;
    outline: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

//config-button stas

@mixin icon-state($state) {
  $url: map-get(variables.$icon-button-svgs, $state);
  background-image: url(#{$url});
  background-repeat: no-repeat;
  background-position: center;
  background-size: 1.25rem 1.25rem;
}


/* spacings mixins */

//margin, padding and gap spacing
@mixin spacing($property, $size) {
    #{$property}: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-#{$key} {
        @include spacing(margin, $key);
    }

    .padding-#{$key} {
        @include spacing(padding, $key);
    }

    .gap-#{$key} {
        @include spacing(gap, $key);
    }
}

//y-axis spacing
@mixin spacing-y($property, $size) {
    #{$property}-top: map-get(spacing.$spacers, $size);
    #{$property}-bottom: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-y-#{$key} {
        @include spacing-y(margin, $key);
    }

    .padding-y-#{$key} {
        @include spacing-y(padding, $key);
    }
}

//x-axis spacing
@mixin spacing-x($property, $size) {
    #{$property}-left: map-get(spacing.$spacers, $size);
    #{$property}-right: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-x-#{$key} {
        @include spacing-x(margin, $key);
    }

    .padding-x-#{$key} {
        @include spacing-x(padding, $key);
    }
}


/* breakpoints mixins */

//mixin breakpoint up
@mixin media-breakpoint-up($breakpoint) {
    $min: map-get(breakpoints.$grid-breakpoints, $breakpoint);

    @if $min !=null and $min !=0 {
        @media (min-width: $min) {
            @content;
        }
    }

    @else if $min ==0 {
        @content;
    }

    @else {
        @warn "Breakpoint '#{$breakpoint}' não definido.";
    }
}

//mixin breakpoint down
@mixin media-breakpoint-down($breakpoint) {
    $breakpoints: map-keys(breakpoints.$grid-breakpoints);
    $index: index($breakpoints, $breakpoint);

    @if $index !=null and $index < length($breakpoints) {
        $next-breakpoint: nth($breakpoints, $index + 1);
        $max: map-get(breakpoints.$grid-breakpoints, $next-breakpoint);
        $max: $max - 0.02px;

        @media (max-width: $max) {
            @content;
        }
    }

    @else if $index ==length($breakpoints) {
        @warn "Não existe 'down' para o último breakpoint: #{$breakpoint}";
    }

    @else {
        @warn "Breakpoint '#{$breakpoint}' não encontrado.";
    }
}

//mixin breakpoint between
@mixin media-breakpoint-between($lower, $upper) {
    $min: map-get(breakpoints.$grid-breakpoints, $lower);
    $upper-breakpoints: map-keys(breakpoints.$grid-breakpoints);
    $upper-index: index($upper-breakpoints, $upper);
    $next-upper: nth($upper-breakpoints, $upper-index + 1);
    $max: map-get(breakpoints.$grid-breakpoints, $next-upper);
    $max: $max - 0.02px;

    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }

    @else {
        @warn "Breakpoints '#{$lower}' ou '#{$upper}' inválidos.";
    }
}