@use './spacing';
@use './breakpoints';
@use './colors';
@use './variables';
@use './placeholders' as *;


/* button mixins */
//config-button stas

@mixin icon-state($state) {
    $url: map-get(variables.$icon-button-svgs, $state);
    background-image: url(#{$url});
    background-repeat: no-repeat;
    background-position: center;
    
    // background-size: 2.5rem 2.5rem;
}

/* config button */
// config button states
@mixin config-state($state, $active: false) {

    @extend %icon-base;

    $config: map-get(variables.$icon-states, $state);

    @if $state == idle or $state == pressed {
        $suffix: if($active, 'true', 'false');
        $bg-key: unquote('bg-#{$suffix}');
        $text-key: unquote('text-#{$suffix}');

        background-color: map-get($config, $bg-key);
        color: map-get($config, $text-key);

    @if $state == pressed and $active {
        transform: translateY(1px);
        }
    } @else {
        background-color: map-get($config, bg);
        color: map-get($config, text);

        @if $state == disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
    }
}

/* tab mixins */
//tab nav states
@mixin tab-state($state, $active: false) {

    @extend %tab-base;

    $config: map-get(variables.$tab-states, $state);

    @if $state == idle or $state == pressed {
        $suffix: if($active, 'true', 'false');
        $bg-key: unquote('bg-#{$suffix}');
        $text-key: unquote('text-#{$suffix}');

        background-color: map-get($config, $bg-key);
        color: map-get($config, $text-key);

    @if $state == pressed and $active {
        transform: translateY(1px);
        }
    } @else {
        background-color: map-get($config, bg);
        color: map-get($config, text);

        @if $state == disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
    }
}

//color mixin for active/inactive text
@mixin font-status($color) {
  color: $color;
}

@each $key, $value in variables.$statuses {
  .status--#{$key} {
    @include font-status($value);
  }
}

//color mixin for enabled/disabled div-bar
@mixin bg-status($color) {
  background-color: $color;
}

@each $key, $value in variables.$statuses {
  .bar-#{$key} {
    @include bg-status($value);
  }
}


/* spacings mixins */
//margin, padding and gap spacing
@mixin spacing($property, $size) {
    #{$property}: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-#{$key} {
        @include spacing(margin, $key);
    }

    .padding-#{$key} {
        @include spacing(padding, $key);
    }

    .gap-#{$key} {
        @include spacing(gap, $key);
    }
}

//y-axis spacing
@mixin spacing-y($property, $size) {
    #{$property}-top: map-get(spacing.$spacers, $size);
    #{$property}-bottom: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-y-#{$key} {
        @include spacing-y(margin, $key);
    }

    .padding-y-#{$key} {
        @include spacing-y(padding, $key);
    }
}

//x-axis spacing
@mixin spacing-x($property, $size) {
    #{$property}-left: map-get(spacing.$spacers, $size);
    #{$property}-right: map-get(spacing.$spacers, $size);
}

@each $key, $value in spacing.$spacers {
    .margin-x-#{$key} {
        @include spacing-x(margin, $key);
    }

    .padding-x-#{$key} {
        @include spacing-x(padding, $key);
    }
}


/* breakpoints mixins */

//mixin breakpoint up
@mixin media-breakpoint-up($breakpoint) {
    $min: map-get(breakpoints.$grid-breakpoints, $breakpoint);

    @if $min !=null and $min !=0 {
        @media (min-width: $min) {
            @content;
        }
    }

    @else if $min ==0 {
        @content;
    }

    @else {
        @warn "Breakpoint '#{$breakpoint}' não definido.";
    }
}

//mixin breakpoint down
@mixin media-breakpoint-down($breakpoint) {
    $breakpoints: map-keys(breakpoints.$grid-breakpoints);
    $index: index($breakpoints, $breakpoint);

    @if $index !=null and $index < length($breakpoints) {
        $next-breakpoint: nth($breakpoints, $index + 1);
        $max: map-get(breakpoints.$grid-breakpoints, $next-breakpoint);
        $max: $max - 0.02px;

        @media (max-width: $max) {
            @content;
        }
    }

    @else if $index ==length($breakpoints) {
        @warn "Não existe 'down' para o último breakpoint: #{$breakpoint}";
    }

    @else {
        @warn "Breakpoint '#{$breakpoint}' não encontrado.";
    }
}

//mixin breakpoint between
@mixin media-breakpoint-between($lower, $upper) {
    $min: map-get(breakpoints.$grid-breakpoints, $lower);
    $upper-breakpoints: map-keys(breakpoints.$grid-breakpoints);
    $upper-index: index($upper-breakpoints, $upper);
    $next-upper: nth($upper-breakpoints, $upper-index + 1);
    $max: map-get(breakpoints.$grid-breakpoints, $next-upper);
    $max: $max - 0.02px;

    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }

    @else {
        @warn "Breakpoints '#{$lower}' ou '#{$upper}' inválidos.";
    }
}